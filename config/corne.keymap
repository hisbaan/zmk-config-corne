/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            timeout-ms=<50>;
            key-positions = <24 35>;
            layers = <0>;
            bindings = <&caps_word>;
        };
    };
    behaviors {
        tildesc: tilde_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_ESC";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ht_tildesc: hold_tap_hold_preferred_tilde_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TILDE_ESC";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&kp>, <&tildesc>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
// ┌─────┬─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┬─────┐
// │ TAB │  Q  │  W  │  E  │  R  │  T  │   │  Y  │  U  │  I  │  O  │  P  │ \   │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │ CTL │  A  │  S  │  D  │  F  │  G  │   │  H  │  J  │  K  │  L  │  ;  │ '   │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │ SFT │  Z  │  X  │  C  │  V  │  B  │   │  N  │  M  │  ,  │  .  │  /  │ SFT │
// └─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────┘
//                   │ GUI │ LWR │ SPC │   │ RET │ RSE │ BSP │
//                   └─────┴─────┴─────┘   └─────┴─────┴─────┘
        default_layer {
            label = "Base";
            bindings = <
   &kp TAB             &kp Q &kp W &kp E    &kp R &kp T           &kp Y   &kp U &kp I     &kp O   &kp P       &kp BSLH
   &ht_tildesc LCTRL 0 &kp A &kp S &kp D    &kp F &kp G           &kp H   &kp J &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT           &kp Z &kp X &kp C    &kp V &kp B           &kp N   &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                                   &kp LGUI &mo 1 &kp SPACE       &kp RET &mo 2 &bspc_del
            >;
        };

// ┌─────┬─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┬─────┐
// │     │  1  │  2  │  3  │  4  │  5  │   │  6  │  7  │  8  │  9  │  0  │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │     │     │     │     │     │   │     │  4  │  5  │  6  │     │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │     │     │     │     │     │   │     │  1  │  2  │  3  │     │     │
// └─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────┘
//                   │     │     │     │   │  0  │     │ ALT │
//                   └─────┴─────┴─────┘   └─────┴─────┴─────┘
        lower_layer {
            label = "Lower";
            bindings = <
   &trans  &kp N1 &kp N2 &kp N3   &kp N4 &kp N5      &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans
   &trans  &trans &trans &trans   &trans &trans      &trans &kp N4 &kp N5 &kp N6 &trans &trans
   &trans  &trans &trans &trans   &trans &trans      &trans &kp N1 &kp N2 &kp N3 &trans &trans
                         &trans   &trans &trans      &kp N0 &trans &kp RALT
            >;
        };

// ┌─────┬─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┬─────┐
// │     │  !  │  @  │  #  │  $  │  %  │   │  ^  │  &  │  *  │  (  │  )  │ BSP │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │     │     │     │     │     │   │  -  │  +  │  [  │  ]  │  \  │  `  │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │     │     │     │     │     │   │  _  │  =  │  {  │  }  │  |  │  ~  │
// └─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────┘
//                   │     │     │     │   │     │     │ ALT │
//                   └─────┴─────┴─────┘   └─────┴─────┴─────┘
        raise_layer {
            label = "Raise";
            bindings = <
   &kp  TAB             &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &ht_tildesc LCTRL 0  &trans   &trans &trans   &trans   &trans      &kp MINUS &kp PLUS  &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT            &trans   &trans &trans   &trans   &trans      &kp UNDER &kp EQUAL &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	                &trans   &trans   &trans      &trans    &trans    &kp RALT
            >;
        };

// ┌─────┬─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┬─────┐
// │     │ LG1 │ LG2 │ LG3 │ LG4 │ LG5 │   │ LG6 │ LG7 │ LG8 │ LG9 │ LG0 │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │ BCL │ BT1 │ BT2 │ BT3 │ BT4 │ BT5 │   │ LEF │ DOW │ UP  │ RIT │     │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │ SG1 │ SG2 │ SG3 │ SG4 │ SG5 │   │ SG6 │ SG7 │ SG8 │ SG9 │ SG0 │     │
// └─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────┘
//                   │     │     │     │   │     │     │     │
//                   └─────┴─────┴─────┘   └─────┴─────┴─────┘
        tri_layer {
            label = "Tri";
            bindings = <
   &trans     &kp LG(N1)     &kp LG(N2)     &kp LG(N3)     &kp LG(N4)     &kp LG(N5)       &kp LG(N6)     &kp LG(N7)     &kp LG(N8)     &kp LG(N9)     &kp LG(N0)     &trans
   &bt BT_CLR &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      &trans         &trans
   &trans     &kp LS(LG(N1)) &kp LS(LG(N2)) &kp LS(LG(N3)) &kp LS(LG(N4)) &kp LS(LG(N5))   &kp LS(LG(N6)) &kp LS(LG(N7)) &kp LS(LG(N8)) &kp LS(LG(N9)) &kp LS(LG(N0)) &trans
                    	                    &trans         &trans         &trans           &trans         &trans         &trans
            >;
        };
    };
};
