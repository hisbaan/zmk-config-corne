/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            timeout-ms=<50>;
            key-positions = <24 35>;
            bindings = <&caps_word>;
        };
    };
    behaviors {
        tildesc: tile_escape {
            compatible = "zmk,behaviour-mod-morph";
            label = "TILDE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
// ---------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  | \    |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  | '    |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  | SHFT |
//                    | GUI | LWR | SPC |   | RET | RAIS | BSPC |

            label = "Base";
            bindings = <
   &kp TAB         &kp Q &kp W     &kp E    &kp R &kp T           &kp Y &kp U  &kp I     &kp O   &kp P       &kp BSLH
   &mt LCTRL ESC   &kp A &kp S     &kp D    &kp F &kp G           &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT       &kp Z &kp X     &kp C    &kp V &kp B           &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                                   &kp LGUI &mo 1 &kp SPACE       &kp RET &mo 2 &kp BSPC
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
   &trans  &kp N1 &kp N2 &kp N3   &kp N4 &kp N5      &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans
   &trans  &trans &trans &trans   &trans &trans      &trans &kp N4 &kp N5 &kp N6 &trans &trans
   &trans  &trans &trans &trans   &trans &trans      &trans &kp N1 &kp N2 &kp N3 &trans &trans
                         &trans   &trans &trans      &trans &trans &kp N0
            >;
        };

        raise_layer {
// -------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            label = "Raise";
            bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &trans   &trans   &trans      &trans    &trans    &kp RALT
            >;
        };

        tri_layer {
            label = "Tri";
            bindings = <
   &trans     &kp LG(N1)     &kp LG(N2)     &kp LG(N3)     &kp LG(N4)     &kp LG(N5)       &kp LG(N6)     &kp LG(N7)     &kp LG(N8)     &kp LG(N9)     &kp LG(N0)     &trans
   &bt BT_CLR &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      &trans         &trans
   &trans     &kp LS(LG(N1)) &kp LS(LG(N2)) &kp LS(LG(N3)) &kp LS(LG(N4)) &kp LS(LG(N5))   &kp LS(LG(N6)) &kp LS(LG(N7)) &kp LS(LG(N8)) &kp LS(LG(N9)) &kp LS(LG(N0)) &trans
                    	                    &trans         &trans         &trans           &trans         &trans         &trans
            >;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
